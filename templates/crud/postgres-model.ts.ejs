import { db, DbType } from '../datasources/<%- datasource %>'

export class <%- name.classCase %> {
    db: DbType;

    constructor (db: DbType) {
        this.db = db;
    }

    async init () {
        const query = `
            CREATE SEQUENCE IF NOT EXISTS <%- tableName %>_id_seq;
            CREATE TABLE IF NOT EXISTS <%- tableName %> (
                id int primary key DEFAULT nextval('<%- tableName %>_id_seq'), 
                <%- fieldsCreateList %>
            );
            ALTER SEQUENCE <%- tableName %>_id_seq OWNED BY <%- tableName %>.id;
            `;
        return await this.db.query(query);
    }

    async deInit () {
        const query = `
            DROP TABLE IF EXISTS <%- tableName %>;
            DROP SEQUENCE IF EXISTS <%- tableName %>_id_seq;
            `;
        return await this.db.query(query);
    }

    async seed () {
        // const query = 'INSERT INTO <%- tableName %>(name) VALUES(<%- fieldsArgsList %>) RETURNING id';
        // return await this.db.query(query, ['bob']);
    }

    async cleanSeed () {
        const query = 'TRUNCATE TABLE <%- tableName %>';
        return await this.db.query(query);
    }

    async add (record: any) {
        const query = 'INSERT INTO <%- tableName %>(<%- fieldsNameList %>) VALUES(<%- fieldsArgsList %>) RETURNING id';
        return await this.db.query(query, [<%- fieldsRecordArr %>]);
    }

    async edit (id: number, record: any) {
        const query = 'UPDATE <%- tableName %> SET <%- fieldsUpdateList %> WHERE id = $1';
        return await this.db.query(query, [id, <%- fieldsRecordArr %>]);
    }

    async remove (id: number) {
        const query = 'DELETE FROM <%- tableName %> WHERE id = $1';
        return await this.db.query(query, [id]);
    }

    async get (id: number) {
        const query = 'SELECT id,<%- fieldsNameList %> FROM <%- tableName %> WHERE id = $1 LIMIT 1';
        const result = await this.db.query(query, [id]);
        return result.rows[0];
    }

    async list (page?: number, pageSize?: number) {
        const query = 'SELECT id,<%- fieldsNameList %> FROM <%- tableName %> ORDER BY id LIMIT 5';
        const result = await this.db.query(query);
        return result.rows;
    }

    async search (page?: number, pageSize?: number, filter?: any, projection?: any) {
        const query = 'SELECT id,<%- fieldsNameList %> FROM <%- tableName %> ORDER BY id LIMIT 5';
        const result = await this.db.query(query);
        return result.rows;
    }

    async count (filter?: any, projection?: any) {
        const query = 'SELECT COUNT(*) FROM <%- tableName %>';
        const result = await this.db.query(query);
        return result.rows[0];
    }
}

export const <%- name.camelCase %> = new <%- name.classCase %>(db);

export const initPromise = (async function () {
    await <%- name.camelCase %>.deInit();
    await <%- name.camelCase %>.init();
})();
