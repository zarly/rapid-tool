import { Pool } from 'pg';

export class <%= name.classCase => {
    db: Pool;

    constructor (db: Pool) {
        this.db = db;
    }

    async init () {
        const query = `
            CREATE SEQUENCE IF NOT EXISTS <%= tableName =>_id_seq;
            CREATE TABLE IF NOT EXISTS <%= tableName => (
                id int primary key DEFAULT nextval('<%= tableName =>_id_seq'), 
                name text
            );
            ALTER SEQUENCE <%= tableName =>_id_seq OWNED BY <%= tableName =>.id;
            `;
        await this.db.query(query);
    }

    async deInit () {
        const query = `
            DROP TABLE IF EXISTS <%= tableName =>;
            DROP SEQUENCE IF EXISTS <%= tableName =>_id_seq;
            `;
        await this.db.query(query);
    }

    async seed () {
        const query = 'INSERT INTO <%= tableName =>(name) VALUES($1) RETURNING id';
        await this.db.query(query, ['bob']);
    }

    async cleanSeed () {
        const query = 'TRUNCATE TABLE <%= tableName =>';
        await this.db.query(query);
    }

    async add (record: any) {

    }

    async edit (id: number) {

    }

    async remove (id: number) {

    }

    async get (id: number) {

    }

    async list (page?: number, pageSize?: number) {
        const response = await this.db.query('SELECT * FROM <%= tableName =>');
        return response.rows;
    }

    async search (page?: number, pageSize?: number, filter?: any, projection?: any) {

    }

    async bunch (commands: any[]) {

    }
}
